<!-- Navbar Start -->
<nav class="navbar navbar-expand-lg bg-white navbar-light sticky-top px-4 px-lg-5">
    <a href="/" class="navbar-brand d-flex align-items-center">
        <h1 class="m-0">Bike Accessories Sales</h1>
    </a>
    <button type="button" class="navbar-toggler me-0" data-bs-toggle="collapse" data-bs-target="#navbarCollapse">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarCollapse">
        <div class="navbar-nav ms-auto p-4 p-lg-0">
            <a href="/" class="nav-item nav-link active">Home</a>
            <a href="/about" class="nav-item nav-link">About</a>
            <a href="/products" class="nav-item nav-link">Products</a>

            {{#if isLogin}}
            <form action="/logout" class="nav-item nav-link text-danger" method="post">
                <input value="Logout" type="submit" style="border: 0ch;color:red;background-color:white;">
            </form>
            {{else }}
            <a href="/login" class="nav-item nav-link">Login / Sign up</a>
            {{/if}}
            <a href="/cart" class="nav-item nav-link"><i class="fa fa-shopping-cart"></i></a>
            {{#if isLogin}}
            <a href="/profile" class="nav-item nav-link"><i class="fa fa-user-circle"></i></a>
            {{/if}}
        </div>
    </div>
</nav>
<!-- Navbar End -->

<body style="background-color: rgb(184, 210, 189);">
    <br><br><br>

    <div class="container">
        <div class="row">

            {{!-- <form action="/place-order" method="post"> --}}
                <div class="col-md-4 order-md-2 mb-4 ">
                    <h4 class="d-flex justify-content-between align-items-center mb-3">
                        <span class="text-muted">YOUR CART</span>
                        <span class="badge badge-secondary badge-pill text-dark">{{this.count}}</span>
                    </h4>

                    <ul class="list-group mb-3  shadow">
                        {{#each cartArray}}
                        <li class="list-group-item d-flex justify-content-between lh-condensed">
                            <div>
                                <h6 class="my-0">{{this.name}}</h6>
                                <small class="text-muted">‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎
                                </small>

                            </div>
                            <span name="count">{{this.count}}</span>
                            x<span class="text-muted "> {{this.rate}}</span>
                            <span>Rs {{this.tAmount}}</span>
                        </li>
                        <input type="hidden" name="name" value="{{this.name}}">
                        <input type="hidden" name="price" value="{{this.rate}}">
                        <input type="hidden" name="productId" value="{{this._id}}">
                        <input type="hidden" name="quantity" value="{{this.count}}">

                        {{/each}}
                        <li class="list-group-item d-flex justify-content-between">
                            <span>Total (RS)</span>
                            <Strong><del id="oldTotal"></del></Strong>
                            <strong id="total">{{Total}}</strong>
                            <input type="hidden" id="subTotal" value="{{Total}}">
                        </li>
                    </ul>

                    <div>
                        <form class="card p-2 shadow">
                            <div class="input-group">
                                <input type="text" class="form-control" id="coupon" placeholder="Promo code">
                                <div class="input-group-append">
                                    <a class="btn btn-secondary" onclick="promoCheck()">Redeem</a>
                                </div>
                            </div>
                        </form>
                        <center>
                            <p class="text-danger my-3" id="errMsg"></p>
                            <p class="text-success my-3" id="scsMsg"></p>
                        </center>
                    </div>

                </div>
                <div class="col-md-8 order-md-1">
                    {{!--
                    <hr class="mb-4"> --}}
                    <h4 class="mb-3">Payment</h4>
                    <div class="d-block my-3">
                        <div class="custom-control custom-radio">
                            <input id="cod" name="paymentMethod" value="cod" type="radio" class="custom-control-input"
                                checked="" required="">
                            <label class="custom-control-label" for="credit">Cash on delivery</label>
                        </div>
                        <div class="custom-control custom-radio">
                            <input id="razor" name="paymentMethod" value="razor" type="radio"
                                class="custom-control-input" checked="" required="">
                            <label class="custom-control-label" for="debit">Razor pay</label>
                        </div>
                        <hr class="mb-4">
                        <h4 class="mb-3">Delivery Method</h4>

                        <div class="custom-control custom-radio">
                            <input id="sheduled" name="deliveryMethod" type="radio" class="custom-control-input"
                                checked="" required="" value="scheduled">
                            <label class="custom-control-label" for="credit">Scheduled delivery</label>
                        </div>

                        <div class="custom-control custom-radio">
                            <input id="nonsheduled" name="deliveryMethod" type="radio" class="custom-control-input"
                                checked="" required="" value="normal">
                            <label class="custom-control-label" for="credit">Normal delivery</label>
                        </div>

                        <div>
                            <input onclick="date()" name="date" type="date" id="date" class="shadow form-control "
                                style="display: none;">
                        </div>



                        <hr class="mb-3">

                        <div class="my-3">
                            <a href="/add-address" type="button" class="btn shadow data-mdb-ripple-color='dark'"
                                style="background-color:#386BC0;color: aliceblue;">
                                Add address +</a>
                        </div>

                        <select id="address" class="form-select" aria-label="Default select example">
                            {{#each address}}
                            <option value="{{this._id}}">{{this.address}}</option>
                            {{/each}}
                        </select>

                        <br>
                        <center>
                            <button class="btn btn-primary btn-lg btn-block shadow" id="placeOrderButton"
                                style="font-family: Arial, Helvetica, sans-serif;" onclick="CheckplaceOrder()">
                                Continue to checkout
                            </button>
                        </center>


                    </div>
                </div>
            </form>

        </div>
       
</body>



<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>

    let total = document.getElementById('subTotal').value
    console.log(total, '168')
    let subtotal = Number(total)
    console.log(subtotal, '170')
    let totalAmount = subtotal
    let gtotal = subtotal * 100
    let  oldTotal = document.getElementById('oldTotal')
    let couponused = false
    let promocode 
    let promoOffer

   async function CheckplaceOrder() {
        let payment = Object.values(document.getElementsByName('paymentMethod')).filter((item) => item.checked ? item : '').map((item) => item.value)
        if (payment[0] == 'cod') {

            checkoutSubmit()
        } else {
            let orderId;
            subtotal = totalAmount

                let settings = {
                    url: "/create/orderId",
                    method: "POST",
                    timeout: 0,
                    headers: {
                        "Content-Type": "application/json",
                    },
                    data: JSON.stringify({
                        amount: gtotal, 
                    }),
                };

                
                 $.ajax(settings).done(function (response) {
                    orderId = response.orderId;
                    console.log(orderId);
                });

           document.getElementById("placeOrderButton").onclick = function (e) {
                let options = {
                    key: "rzp_test_iokOwNXFWNwA5p", 
                    amount: gtotal, 
                    currency: "INR",
                    name: "Dairy Camp",
                    description: "Test Transaction",
                    image: "https://example.com/your_logo",
                    order_id: orderId, 
                    handler: function (response) {
                        let settings = {
                            url: "/api/payment/verify",
                            method: "POST",
                            timeout: 0,
                            headers: {
                                "Content-Type": "application/json",
                            },
                            data: JSON.stringify({ response }),
                        };
                        $.ajax(settings).done(function (response) {
                            checkoutSubmit();
                            console.log("i'm 220")
                        });
                    },

                    theme: {
                        color: "#99cc33",
                    },
                };
                let rzp1 = new Razorpay(options);
                rzp1.on("payment.failed", function (response) {
                    alert(response.error.code);
                    alert(response.error.description);
                    alert(response.error.source);
                    alert(response.error.step);
                    alert(response.error.reason);
                    alert(response.error.metadata.order_id);
                    alert(response.error.metadata.payment_id);
                });
                rzp1.open();
                e.preventDefault();   
            }; 
        }
    } 

    


    async function promoCheck() {   
        promocode = document.getElementById('coupon').value
        document.getElementById('errMsg').innerHTML = ''
        document.getElementById('scsMsg').innerHTML = ''

        let data = await fetch('/coupon-check', {
            method: 'POST',
            headers: {
                'Content-type': 'application/json'
            },
            body: JSON.stringify({
                promocode
            })
        })

        let response = await data.json()

        if (response == 'Invalid Coupon') {
            console.log('1')
            document.getElementById('errMsg').innerHTML = 'Invalid Coupon'
        }
        else if (response == 'Already Used') {
            console.log('2')
            document.getElementById('errMsg').innerHTML = 'Already Used'
        }
        else {
            console.log('3', response)
            document.getElementById('scsMsg').innerHTML = 'Coupon Applied'
            let Total = document.getElementById('subTotal').value
            let Subtotal = Number(Total)
            oldTotal.innerHTML = Subtotal
            promoOffer = response
            response = 100 - response
            Subtotal = Subtotal * (response / 100)
            console.log(Subtotal, '292')
            document.getElementById('total').innerHTML = Subtotal

            document.getElementById('subTotal').value = Subtotal

            document.getElementById('subTotal').setAttribute('value', Subtotal)
            let newTotal = document.getElementById('subTotal').value
            gtotal = newTotal * 100
            couponused = true
        }
    }




    let sheduled = document.getElementById('sheduled')
    let nonsheduled = document.getElementById('nonsheduled')
    let dateField = document.getElementById('date')

    sheduled.addEventListener('change', () => {
        dateField.style.display = 'block'
    })
    nonsheduled.addEventListener('change', () => {
        dateField.style.display = 'none'
    })

    function date() {
        let date = new Date()
        date.setDate(date.getDate() + 1)
        date = date.toISOString().substr(0, 10);

        let maxDate = new Date()
        maxDate.setDate(maxDate.getDate() + 8)
        maxDate = maxDate.toISOString().substr(0, 10);

        document.getElementById('date').setAttribute('min', date)
        document.getElementById('date').setAttribute('max', maxDate)
    }

    async function checkoutSubmit() {

        const length = document.getElementsByName('name').length
        let products = []
        let productid = []
        let price = []
        let quantity = []
        let date = document.getElementById('date').value
        const address = document.getElementById('address').value



        const paymentMethod = Object.values(document.getElementsByName('paymentMethod')).filter((val) => val.checked ? val : '')[0].value
        const deliveryMethod = Object.values(document.getElementsByName('deliveryMethod')).filter((val) => val.checked ? val : '')[0].value
        let checkOutData = []
       

        for (let i = 0; i < length; i++) {
            products.push(document.getElementsByName('name')[i].value)
            productid.push(document.getElementsByName('productId')[i].value)
            price.push(document.getElementsByName('price')[i].value)
            quantity.push(document.getElementsByName('quantity')[i].value)

            checkOutData.push({
                product: Object.values(products)[i],
                productid: Object.values(productid)[i],
                price: Number(Object.values(price)[i]),
                counts: Number(Object.values(quantity)[i]),
            })
        }

        checkOutData.push({
            scheduledate: date,
            addressid: address,
            subtotal: subtotal,
            paymentMethod: paymentMethod,
            deliveryMethod: deliveryMethod,
            couponused : couponused,
            promocode : promocode,
            offer : promoOffer
        })

        try {
            let orderplacement = await fetch('/place-order', {
                method: 'post',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(checkOutData)
            })
            let res = await orderplacement.json()
            if (res == "success") {
                Swal.fire({
                    title: 'Success',
                    text: "Item ordered successfully !",
                    icon: 'success',
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'OK',
                    timer: 3000
                }).then((res) => {
                    window.location.href = '/'
                }) 
            } else Swal.fire({
                title: 'Something went wrong',
                text: "something went wrong !",
                icon: 'failure',
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'OK',
                timer: 3000
            }).then((res) => {
                window.location.href = '/home'
            })
        } catch (error) {
            console.log(error)
        }
    }
</script>

<style>
    .container {
        max-width: 960px;
    }

    .lh-condensed {
        line-height: 1.25;
    }
</style>